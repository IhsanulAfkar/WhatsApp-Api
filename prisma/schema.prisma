datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  pkId            Int       @id @default(autoincrement())
  id              String    @unique @default(uuid())
  firstName       String    @map("first_name") @db.VarChar(128)
  lastName        String?   @map("last_name") @db.VarChar(128)
  username        String    @unique @db.VarChar(128)
  phone           String?   @unique @db.VarChar(20)
  email           String    @unique @db.VarChar(255)
  password        String    @db.VarChar(255)
  accountApiKey   String?   @unique @map("account_api_key") @db.VarChar(128)
  googleId        String?   @unique @map("google_id") @db.VarChar(128)
  emailOtpSecret  String?   @map("email_otp_secret") @db.VarChar(255)
  refreshToken    String?   @unique @map("refresh_token") @db.VarChar(255)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @map("updated_at")
  emailVerifiedAt DateTime? @map("email_verfied_at")
  devices         Device[]
  Group           Group[]

  Transaction Transaction[]
  Product     Product[]
}

model Device {
  pkId           Int             @id @default(autoincrement())
  id             String          @unique @default(uuid())
  name           String          @db.VarChar(128)
  phone          String?         @db.VarChar(20)
  apiKey         String          @unique @map("api_key") @db.VarChar(255)
  status         String          @default("close") @map("status") @db.VarChar(20)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  userId         Int
  user           User            @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  sessions       Session[]
  autoReplies    AutoReply[]
  campaigns      Campaign[]
  contactDevices ContactDevice[]
  Broadcast      Broadcast[]
  DeviceLog      DeviceLog[]
}

model DeviceLog {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique @default(uuid())
  status    String   @db.VarChar(20)
  deviceId  Int
  sessionId String?
  device    Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Session {
  pkId      Int    @id @default(autoincrement())
  id        String
  sessionId String
  data      String @db.Text
  deviceId  Int
  device    Device @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)

  @@unique([sessionId, id], map: "unique_id_per_session_id_session")
  @@index([sessionId])
}

model Contact {
  pkId            Int               @id @default(autoincrement())
  id              String            @unique @default(uuid())
  firstName       String            @db.VarChar(128)
  lastName        String?           @db.VarChar(128)
  phone           String            @db.VarChar(20)
  email           String?           @db.VarChar(255)
  gender          String?           @db.VarChar(10)
  colorCode       String?           @db.VarChar(6)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  contactGroups   ContactGroup[]
  contactDevices  ContactDevice[]
  OutgoingMessage OutgoingMessage[]
  IncomingMessage IncomingMessage[]
}

model ContactGroup {
  pkId      Int     @id @default(autoincrement())
  id        String  @unique @default(uuid())
  contactId Int
  groupId   Int
  contact   Contact @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  group     Group   @relation(fields: [groupId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, groupId])
}

model ContactDevice {
  pkId      Int     @id @default(autoincrement())
  id        String  @unique @default(uuid())
  contactId Int
  deviceId  Int
  contact   Contact @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  device    Device  @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, deviceId])
}

model Group {
  pkId          Int            @id @default(autoincrement())
  id            String         @unique @default(uuid())
  name          String         @db.VarChar(128)
  type          String         @db.VarChar(128)
  userId        Int
  user          User           @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  contactGroups ContactGroup[]
  campaigns     Campaign[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
}

model OutgoingMessage {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique
  to        String
  message   String?
  mediaPath String?
  schedule  DateTime
  status    String   @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  sessionId String?
  contactId Int?
  contact   Contact? @relation(fields: [contactId], references: [pkId], onDelete: Cascade)

  @@unique([sessionId, to, id], map: "unique_outgoing_message_key_per_session_id")
}

model IncomingMessage {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique
  from       String
  message    String
  mediaPath  String?
  receivedAt DateTime @map("received_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  sessionId  String?
  contactId  Int?
  contact    Contact? @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
}

model Broadcast {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid())
  name       String   @db.VarChar(128)
  status     Boolean  @default(true)
  recipients String[]
  message    String   @db.VarChar(255)
  schedule   DateTime
  delay      Int
  isSent     Boolean  @default(false)
  mediaPath  String?
  deviceId   Int
  device     Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
}

model AutoReply {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid())
  name       String   @db.VarChar(128)
  requests   String[]
  response   String   @db.VarChar(255)
  status     Boolean  @default(true)
  recipients String[]
  mediaPath  String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  deviceId   Int
  device     Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
}

model Campaign {
  pkId                 Int               @id @default(autoincrement())
  id                   String            @unique @default(uuid())
  name                 String            @db.VarChar(128)
  status               Boolean           @default(true)
  registrationSyntax   String            @unique @map("registration_syntax") @db.VarChar(128)
  unregistrationSyntax String            @unique @map("unregistration_syntax") @db.VarChar(128)
  registrationMessage  String            @map("registration_message") @db.VarChar(255)
  successMessage       String            @map("message_registered") @db.VarChar(255)
  failedMessage        String            @map("message_failed") @db.VarChar(255)
  unregisteredMessage  String            @map("message_unregistered") @db.VarChar(255)
  recipients           String[]
  delay                Int
  isSent               Boolean           @default(false)
  schedule             DateTime
  mediaPath            String?
  groupId              Int               @map("group_id")
  deviceId             Int               @map("device_id")
  group                Group             @relation(fields: [groupId], references: [pkId], onDelete: Cascade)
  device               Device            @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  CampaignMessage      CampaignMessage[]
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @map("updated_at")
}

model CampaignMessage {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid())
  name       String   @db.VarChar(128)
  campaignId Int      @map("campaign_id")
  message    String
  delay      Int
  status     Boolean  @default(true)
  isSent     Boolean  @default(false)
  schedule   DateTime @map("schedule")
  mediaPath  String?
  Campaign   Campaign @relation(fields: [campaignId], references: [pkId], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
}

model Product {
  pkId        Int           @id @default(autoincrement())
  id          String        @unique @default(uuid())
  name        String
  description String?
  media       String?
  amount      Int
  price       Float
  userId      Int
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  user        User          @relation(fields: [userId], references: [pkId])
  Transaction Transaction[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [pkId])
  product Product @relation(fields: [productId], references: [pkId])
}

model PasswordReset {
  pkId              Int      @id @default(autoincrement())
  id                String   @unique @default(uuid())
  email             String   @unique @db.VarChar(255)
  token             String   @unique @db.VarChar(255)
  resetTokenExpires DateTime @map("reset_token_expires")
  createdAt         DateTime @default(now()) @map("created_at")
}

model Message {
  pkId                            BigInt   @id @default(autoincrement())
  sessionId                       String?
  remoteJid                       String
  id                              String
  agentId                         String?
  bizPrivacyStatus                Int?
  broadcast                       Boolean?
  clearMedia                      Boolean?
  duration                        Int?
  ephemeralDuration               Int?
  ephemeralOffToOn                Boolean?
  ephemeralOutOfSync              Boolean?
  ephemeralStartTimestamp         BigInt?
  finalLiveLocation               Json?
  futureproofData                 Bytes?
  ignore                          Boolean?
  keepInChat                      Json?
  key                             Json
  labels                          Json?
  mediaCiphertextSha256           Bytes?
  mediaData                       Json?
  message                         Json?
  messageC2STimestamp             BigInt?
  messageSecret                   Bytes?
  messageStubParameters           Json?
  messageStubType                 Int?
  messageTimestamp                BigInt?
  multicast                       Boolean?
  originalSelfAuthorUserJidString String?
  participant                     String?
  paymentInfo                     Json?
  photoChange                     Json?
  pollAdditionalMetadata          Json?
  pollUpdates                     Json?
  pushName                        String?
  quotedPaymentInfo               Json?
  quotedStickerData               Json?
  reactions                       Json?
  revokeMessageTimestamp          BigInt?
  starred                         Boolean?
  status                          Int?
  statusAlreadyViewed             Boolean?
  statusPsa                       Json?
  urlNumber                       Boolean?
  urlText                         Boolean?
  userReceipt                     Json?
  verifiedBizName                 String?

  @@unique([sessionId, remoteJid, id], map: "unique_message_key_per_session_id")
  @@index([sessionId])
}
